#!/usr/local/bin/perl
    eval 'exec /usr/local/bin/perl -S $0 ${1+"$@"}'
        if $running_under_some_shell;
#!/usr/bin/perl
#
# $Id$
#
use strict;
use warnings;
use utf8;
use open ':utf8';
binmode STDIN, ':utf8';
binmode STDOUT, ':utf8';
use Encode;
use URI;
use LWP::UserAgent;
use XML::LibXML;
use YAML::Syck;
our $VERSION = sprintf "%.2f", (q$Revision$ =~ /(\d+)/g)[0] / 100;

use File::Basename;
my $name = basename($0);
our $NAME = uc $name;

use Getopt::Long qw(:config no_ignore_case);
GetOptions(\%ARGV, qw(
    help version
)) or help();
version() if $ARGV{version};
help()    if $ARGV{help};

my $utf8 = find_encoding('utf8');
my $xml = XML::LibXML->new;
my $ua =
  LWP::UserAgent->new( agent => "$NAME/$VERSION", keep_alive => 4 );
my $base_uri = URI->new('http://ja.wikipedia.org/w/api.php');

$| = 1;
while (1) {
    print '>>> ';
    my $query = <>;
    unless (defined $query) {
        print "\n";
        last;
    }
    chomp $query;
    my $api = search_title($query);
    my @answers;
    for my $title ( map {
                        $_->{title}
                    } @{ $api->{query}{search} } ) {
        my $api = parse_content($title);
        my $html = $api->{parse}{text}{'*'} or next;
        $html = '<body>' . $html . '</body>';
        my $body = $xml->parse_string($html);
        $body->textContent =~ m{
            「 ( [^「」\s]*? \Q$query\E [^「」\s]*? ) 」
            (.*?)
            「 ( [^「」\s]+? ) 」
        }gmsx or next;
        push @answers, {
            distance => length($1) - length($query) + length($2),
            answer   => $3,
        };
    }
    next unless @answers;
    @answers = sort { $a->{distance} > $b->{distance} } @answers;
    print $answers[0]->{answer}, "\n";
}

sub get{
    my $uri = shift;
    my $res = $ua->get($uri);
    die $res->status_line unless $res->is_success;
    return YAML::Syck::Load( $res->content );
}

sub search_title{
    my $query = shift;
    my $uri = $base_uri->clone;
    $uri->query_form(
        action   => 'query',
        list     => 'search',
        srsearch => $query,
        srwhat   => 'text',
        srinfo   => 'suggestion',
        srprop   => '',
#        srlimit  => 50,
        format   => 'yaml',
    );
    return get($uri);
}

sub parse_content{
    my $title = shift;
    my $uri = $base_uri->clone;
    $uri->query_form(
        action => 'parse',
        page   => $title,
        prop   => 'text',
        format => 'yaml',
    );
    return get($uri);
}

sub help{
    die <<"EOT";
Usage: $name [FILE]...

      --help     display this help and exit
      --version  output version information and exit

With no FILE, or when FILE is -, read standard input.

Report $name bugs to Konno.Software\@gmail.com
EOT
}

sub version{
    die <<"EOT";
$name ($NAME) $VERSION
Copyright (C) 2009 Konno Software
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Yuki Konno.
EOT
}

__END__

=head1 NAME

kadie - an artificial intelligence

=head1 SYNOPSIS

    kadie [FILE]...

=head1 COPYRIGHT

Copyright 2009 Yuki Konno E<lt>Konno.Software@gmail.comE<gt>

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
